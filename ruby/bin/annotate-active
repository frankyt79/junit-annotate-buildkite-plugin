#!/usr/bin/env ruby

require 'rexml/document'
require 'rexml/element'
require 'cgi/util'

# Reads a list of junit files and returns a nice Buildkite build annotation on
# STDOUT that count active testcases found.

junits_dir = ARGV[0]
abort("Usage: annotate <junits-dir>") unless junits_dir
abort("#{junits_dir} does not exist") unless Dir.exist?(junits_dir)

job_pattern = ENV['BUILDKITE_PLUGIN_JUNIT_ANNOTATE_JOB_UUID_FILE_PATTERN']
job_pattern = '-(.*).xml' if !job_pattern || job_pattern.empty?


junit_report_files = Dir.glob(File.join(junits_dir, "**", "*"))
active_testcases = 0

def text_content(element)
  # Handle mulptiple CDATA/text children elements
  text = element.texts().map(&:value).join.strip
  if text.empty?
    nil
  else
    text
  end
end

def message_content(element)
  # Handle empty attributes
  message = element.attributes['message'];
  if message.nil? || message.empty?
    nil
  else
    message.to_s
  end
end

junit_report_files.sort.each do |file|
  next if File.directory?(file)

  STDERR.puts "Parsing #{file.sub(junits_dir, '')}"
  job = File.basename(file)[/#{job_pattern}/, 1]
  xml = File.read(file)
  doc = REXML::Document.new(xml)

  REXML::XPath.each(doc, '//testsuite') do |testsuite|
    test_active_count = testsuite.attributes['tests'].to_s
    active_testcases += test_active_count.to_i
  end
end

STDERR.puts "#{active_testcases} active testcases found"

puts "#{active_testcases} active testcases found"
